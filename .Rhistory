library(regioncode)
data("corruption")
# Original 2019 version
corruption$prefecture_id
# 1999 version
regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default set
year_from = 2019,
year_to = 1989)
## ----code2name----------------------------------------------------------------
# The original name
corruption$prefecture
# Codes to name
regioncode(data_input = corruption$prefecture_id,
convert_to = "name",
year_from = 2019,
year_to = 1989)
# Name to codes of the same year
regioncode(data_input = corruption$prefecture,
convert_to = "code",
year_from = 2019,
year_to = 2019)
# Name to name of a different year
regioncode(data_input = corruption$prefecture,
convert_to = "name",
year_from = 2019,
year_to = 1989)
## ----incomplete_name----------------------------------------------------------
# Full, official names
corruption$prefecture
regioncode(data_input = corruption$prefecture,
convert_to = "name",
year_from = 2019,
year_to = 1989,
incomplete_name = "to")
## ----2area--------------------------------------------------------------------
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
convert_to="area")
## ----language_zone------------------------------------------------------------
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
to_dialect = "dia_group")
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
to_dialect = "dia_sub_group")
## ----pinyin-------------------------------------------------------------------
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
convert_to="name",
to_pinyin=TRUE
)
setwd("~/GitHub")
setwd("~/GitHub/regioncode_new")
regioncode(data_input = corruption$prefecture,
year_from = 2011,
year_to = 1989,
convert_to="cityranking")
#' regioncode
#'
#' `regioncode` is developed to conquer the difficulties to convert various region names and administration division codes of Chinese regions. In the current version, `regioncode` enables seamlessly converting Chinese regions' formal names, common-used names, and geocodes between each other at the prefectural level from 1986 to 2019.
#'
#' @param data_input A character vector for names or a six-digit integer vector for division codes to convert.
#' @param year_from A integer to define the year of the input. The default value is 1999.
#' @param year_to A integer to define the year to convert. The default value is 2015.
#' @param convert_to A character indicating the converting methods. At the prefectural level, valid methods include converting between codes in different years, from codes to region names, from region names to division codes, from region names or division codes to sociopolitical area names, and between names in different years. The current version automatically detect the type of the input. Users only need to choose the output to be codes (`code`), names (`name`) , area (`area`) or the ranking of city(`cityranking`). The default option is `code`.
#'  When `province` is TRUE, one can also choose `abbre`, `abbreTocode`, `abbreToname`, and `abbreToarea` to convert between names/codes and abbreviations of provinces.
#' @param incomplete_name A character to specify if a short name of region is used. See the Details for more information. The default is "none". Other options are "from", "to", and "both".
#' @param zhixiashi A logic string to indicate whether treating division codes and names of municipality directly under the central government (Only makes a difference for prefectural-level conversion). The default value is FALSE.
#' @param to_pinyin A logic string to indicate whether the output is in pinyin spelling instead of Chinese characters. The default is FALSE.
#' @param to_dialect A character indicating the language transformation. At the prefectural level, valid transformation include `dia_group`,`dia_sub_group`. At the province level, valid transformation is `dia_super`. The default value is "none".
#'  When `province` is TRUE, one can also choose `dia_super` to get the language zone of provinces.
#' @param province A logic string to indicate the level of converting. The default is FALSE.
#'
#'
#' @details In many national and regional data in China studies, the source applies incomplete names instead of the official, full name of a given region. A typical case is that "Xinjiang" is used much more often than "Xinjiang Weiwuer Zizhiqu" (the Xinjiang Uygur Autonomous Region) for the name of the province. In other cases the "Shi" (City) is often omitted to refer to a prefectural city. `regioncode` accounts this issue by offering the argument `incomplete_name`. The argument has four options: "none", "from", "to", and "both".
#' \itemize{
#'   \item "none": no short name will be used for either input or output;
#'   \item "from": input data is short names instead of the full, official ones;
#'   \item "to": output results will be short names;
#'   \item "both": both input and output are using short names.
#' }
#'
#' The argument makes a difference only when `code` or `name` are chose in `convert_to`.
#' Users can use this argument together with `name` to convert between names and incomplete names.
#'
#' @returns The function returns a character or numeric vector depending on what method is specified.
#'
#' @import dplyr
#' @import pinyin
#'
#' @examples
#'
#' #  library(regioncode)
#'
#' #  regioncode(data_input = corruption$prefecture_id,
#' #             year_from = 2016,
#' #             year_to = 2017)
#'
#'
#' @export
regioncode <- function(data_input,
year_from = 1999,
year_to = 2015,
convert_to = "code",
incomplete_name = "none",
zhixiashi = FALSE,
to_dialect = "none",
to_pinyin = FALSE,
province = FALSE) {
if (!is.character(data_input[1]) & !is.numeric(data_input[1])) {
stop(
"Invalid input: only region names as a character vector or division codes as an integer vector are valid."
)
}
if (!is.numeric(year_from)) {
stop("Invalid input: Converting years must be integers.")
}
if (province) {
if (to_dialect != "none") {
if (to_dialect != "dia_super") {
stop("Invalid input: please choose a valid converting transformation.")
}
} else {
if (!(
convert_to %in% c(
"name",
"code",
"area",
"cityranking",
"nameToabbre",
"codeToabbre",
"abbreToname",
"abbreTocode",
"abbreToarea"
)
)) {
stop("Invalid input: please choose a valid converting method.")
}
}
} else if (to_dialect != "none") {
if (!(to_dialect %in% c("dia_group", "dia_sub_group"))) {
stop("Invalid input: please choose a valid converting transformation.")
}
} else {
if (!(convert_to %in% c("name", "code", "area","cityranking"))) {
stop("Invalid input: please choose a valid converting method.")
}
}
if (province=="TRUE"&zhixiashi=="FALSE"&convert_to %in% c("cityranking"))
stop("Invalid input: province can not convert to cityranking.")
if (!(incomplete_name %in% c("none", "from", "to", "both"))) {
stop(
"Invalid input: the options of `incomplete_name` are one of 'none', 'from', 'to', and 'both'."
)
}
if (incomplete_name == "to" & convert_to == "code") {
stop("Invalid input: can not complete administrative codes.")
}
if (!is.logical(province)) {
stop("Invalid input: param `zhixiashi` must be logical class.")
}
if (!is.character(to_dialect)) {
stop("Invalid input: param `to_dialect` must be character class.")
}
# if (language_zone &  !grepl('_name', data_input, fixed = TRUE))
#   stop(
#     'Invalid input: current version is not supported sname or code as language_zone input.'
#   )
if (!is.logical(zhixiashi)) {
stop("Invalid input: param `zhixiashi` must be logical class.")
}
if (!is.logical(to_pinyin)) {
stop("Invalid input: param `to_pinyin` must be logical class.")
}
if (to_pinyin & convert_to == "code" & to_dialect == FALSE) {
stop("Invalid input: can not translate administrative codes to pinyin.")
}
if (province) {
zhixiashi <- FALSE
# 1 Section of province-level converting
if (to_dialect != "none") {
# 1-1 If convert language zone
if (is.numeric(data_input[1])) {
year_from <- "prov_code"
}
if (is.character(data_input[1])) {
year_from <- "prov_name"
}
ls_index <- switch(to_dialect,
"dia_super" = {
year_to <- "prov_language"
c(year_from, year_to)
}
)
} else {
# 1-2 If not convert language zone
prov_data <-region_data %>%
select(prov_code:`1999_nickname`, "area") %>%
distinct()
# Because province nicknames changed in 1999
#用于判断year_from和year_to的值是否小于1999，如果是，则将其值设为1998，否则设为1999
year_from <- ifelse(year_from < 1999, 1998, 1999)
year_to <- ifelse(year_to < 1999, 1998, 1999)
# Getting the correct "from" column
year_from <- case_when(
is.numeric(data_input[1]) & nchar(data_input[1]) ~ "prov_scode",
is.numeric(data_input[1]) ~ "prov_code",
is.character(data_input[1]) ~ "prov_name"
)
ls_index <- switch(convert_to,
"name" = {
year_to <- "prov_name"
c(year_from, year_to)
},
"code" = {
year_to <- "prov_code"
c(year_from, year_to)
},
"area" = {
year_to <- "area"
c(year_from, year_to)
},
"nameToabbre" = {
year_from <- "prov_name"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"codeToabbre" = {
year_from <- "prov_code"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"abbreToname" = {
year_from <- paste0(year_to, "_nickname")
year_to <- "prov_name"
c(year_from, year_to)
},
"abbreTocode" = {
year_from <- paste0(year_to, "_nickname")
year_to <- "prov_code"
c(year_from, year_to)
},
"abbreToarea" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "area"
c(year_from, year_to)
}
)
}
} else {
# 2 Section of prefectural-level converting
if (to_dialect != "none") {
# 2-1 If convert language zone
if (is.numeric(data_input[1])) {
year_from <- paste0(year_from, "_code")
}
if (is.character(data_input[1])) {
year_from <- paste0(year_from, "_name")
}
ls_index <- switch(to_dialect,
"dia_group" = {
year_to <- "pref_language"
c(year_from, year_to)
},
"dia_sub_group" = {
year_to <- "dia_sub_language"
c(year_from, year_to)
}
)
} else {
# 2-2 If not convert language zone
if (is.numeric(data_input[1])) {
year_from <- paste0(year_from, "_code")
}
if (is.character(data_input[1])) {
year_from <- paste0(year_from, "_name")
}
ls_index <- switch(convert_to,
"code" = {
year_to <- paste0(year_to, "_code")
c(year_from, year_to)
},
"area" = {
year_to <- "area"
c(year_from, year_to)
},
"name" = {
year_to <- paste0(year_to, "_name")
c(year_from, year_to)
},
"cityranking" = {
year_to <- paste0(year_to, "_cityranking")
c(year_from, year_to)
}
)
# Using the Municipal codes for within region codes
if (zhixiashi) {
region_zhixiashi <-region_data %>%
filter(zhixiashi)
region_sname <- region_zhixiashi %>%
select(ends_with("_sname"))
region_name <- region_zhixiashi %>%
select(ends_with("_name"))
region_code <- region_zhixiashi %>%
select(ends_with("_code"))
region_cityranking <- region_zhixiashi %>%
select(ends_with("_cityranking"))
# replacing the prefectural names and codes with provincial names and codes
region_sname2 <-
replicate(ncol(region_sname), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_sname2) <- names(region_sname)
region_name2 <-
replicate(ncol(region_name), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_name2) <- names(region_name)
region_code2 <-
replicate(ncol(region_code), region_zhixiashi$prov_code) %>%
as.data.frame()
names(region_code2) <- names(region_code)
region_zhixiashi <-
bind_cols(region_sname2, region_name2, region_code2, region_cityranking)
region_zhixiashi <-
region_zhixiashi[, order(colnames(region_zhixiashi))]
region_province <-region_data %>%
filter(!zhixiashi)
region_province <-
region_province[, order(colnames(region_province))]
region_data <- bind_rows(region_zhixiashi, region_province)
}
}
}
# When using sname instead of the official name
ls_index <- case_when(
incomplete_name == "both" ~ gsub("_name", "_sname", ls_index),
incomplete_name == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incomplete_name == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incomplete_name == "none" ~ ls_index
)
# Updating the year_from/to after the evaluation of `incomplete_name`
if (incomplete_name != "none") {
year_from <- ls_index[1]
year_to <- ls_index[2]
}
# Convert the input to a data.frame for later merging
df_input <- data_input %>% as.data.frame()
names(df_input) <- ls_index[1]
data_output <-
select(region_data, !!ls_index) %>%
distinct() %>%
left_join(df_input, .) %>%
# using left_join to keep the order of the input data
pull(!!year_to)
# Because '2pinyin' can not be used as a variable name
if (to_pinyin) {
if (is.character(data_output)) {
data_output <-
py(
char = data_output,
dic = pydic(method = "toneless", dic = "pinyin2")
)
}
}
return(data_output)
}
regioncode(data_input = corruption$prefecture,
year_from = 2011,
year_to = 1989,
convert_to="cityranking")
rm(list = ls())
setwd("C:/Users/amand/Documents/GitHub/regioncode_new")
library(dplyr)
library(pacman)
p_load("rio",
"tidyverse")
# import---------------------------------------------------------------------------
load("R/sysdata.rda")
df_citylevel<- import("data/cityranking.xls")
library(tidyverse)
# 定义函数，根据population生成cityranking变量-----------------------------------------
generate_cityranking <- function(df) {
year <- unique(df$year)
year_cityranking <- paste0(year, "_cityranking")
if (year %in% 1986:2013) {
df[[year_cityranking]] <- case_when(
df$population > 100 ~ "特大城市",
df$population > 50 & df$population <= 100 ~ "大城市",
df$population > 20 & df$population <= 50 ~ "中等城市",
df$population <= 20 ~ "小城市",
TRUE ~ NA_character_
)
} else if (year %in% 2014:2019) {
df[[year_cityranking]] <- case_when(
df$population > 1000 ~ "超大城市",
df$population > 500 & df$population <= 1000 ~ "特大城市",
df$population > 300 & df$population <= 500 ~ "I型大城市",
df$population > 100 & df$population <= 300 ~ "II型大城市",
df$population > 50 & df$population <= 100 ~ "中等城市",
df$population > 20 & df$population <= 50 ~ "I型小城市",
df$population <= 20 ~ "II型小城市",
TRUE ~ NA_character_
)
}
df <- select(df, -year, -population,-population_original)
df
}
# 按年份拆分并生成cityranking变量--------------------------------------------------------
dfs <- map(1986:2019, ~df_citylevel %>%
filter(year == .x) %>%
generate_cityranking())
# 合并86-19年的数据集-----------------------------------------------------------------
cityranking<- reduce(dfs, full_join, by = c("city_code", "city_name"))
# 删除city_code为空值的观测-----------------------------------------------------------
cityranking <- cityranking[!is.na(cityranking$city_code), ]
# region_table新建一列city_code-------------------------------------------------------
region_table$city_code <- ifelse(region_table$zhixiashi == "TRUE", region_table$prov_code, region_table$`2019_code`)
#合并---------------------------------------------------------------------------------
region_data <- merge(region_table,cityranking, by = "city_code")
region_data <- select(region_data, -city_code,-city_name)
save(region_data, region_table, corruption,file = "~/GitHub/regioncode_new/R/sysdata.rda")
save(region_data, region_table, corruption,file = "~R/sysdata.rda")
rm(list = ls())
setwd("C:/Users/amand/Documents/GitHub/regioncode_new")
setwd("~/GitHub/regioncode_new")
rm(list = ls())
setwd("C:/Users/amand/Documents/GitHub/regioncode_new")
library(dplyr)
library(pacman)
p_load("rio",
"tidyverse")
# import---------------------------------------------------------------------------
load("R/sysdata.rda")
df_citylevel<- import("data/cityranking.xls")
library(tidyverse)
# 定义函数，根据population生成cityranking变量-----------------------------------------
generate_cityranking <- function(df) {
year <- unique(df$year)
year_cityranking <- paste0(year, "_cityranking")
if (year %in% 1986:2013) {
df[[year_cityranking]] <- case_when(
df$population > 100 ~ "特大城市",
df$population > 50 & df$population <= 100 ~ "大城市",
df$population > 20 & df$population <= 50 ~ "中等城市",
df$population <= 20 ~ "小城市",
TRUE ~ NA_character_
)
} else if (year %in% 2014:2019) {
df[[year_cityranking]] <- case_when(
df$population > 1000 ~ "超大城市",
df$population > 500 & df$population <= 1000 ~ "特大城市",
df$population > 300 & df$population <= 500 ~ "I型大城市",
df$population > 100 & df$population <= 300 ~ "II型大城市",
df$population > 50 & df$population <= 100 ~ "中等城市",
df$population > 20 & df$population <= 50 ~ "I型小城市",
df$population <= 20 ~ "II型小城市",
TRUE ~ NA_character_
)
}
df <- select(df, -year, -population,-population_original)
df
}
# 按年份拆分并生成cityranking变量--------------------------------------------------------
dfs <- map(1986:2019, ~df_citylevel %>%
filter(year == .x) %>%
generate_cityranking())
# 合并86-19年的数据集-----------------------------------------------------------------
cityranking<- reduce(dfs, full_join, by = c("city_code", "city_name"))
# 删除city_code为空值的观测-----------------------------------------------------------
cityranking <- cityranking[!is.na(cityranking$city_code), ]
# region_table新建一列city_code-------------------------------------------------------
region_table$city_code <- ifelse(region_table$zhixiashi == "TRUE", region_table$prov_code, region_table$`2019_code`)
#合并---------------------------------------------------------------------------------
region_data <- merge(region_table,cityranking, by = "city_code")
region_data <- select(region_data, -city_code,-city_name)
save(region_data, region_table, corruption,file = "~R/sysdata.rda")
save(region_data, region_table, corruption,file = "~GitHub/regioncode_new/R/sysdata.rda")
save(region_data, region_table, corruption,file = "~/R/sysdata.rda")
install.packages("pacman")
install.packages("pacman")
install.packages("regioncode", dependencies = TRUE)
remove.packages("regioncode")
install.packages("regioncode")
PATH="path/to/Rtools/bin:${PATH}"
PATH="C:\rtools42"
remove.packages("regioncode")unlink(tempdir(), recursive = TRUE)
remove.packages("regioncode")
unlink(tempdir(), recursive = TRUE)
install.packages("regioncode")
install.packages("regioncode")
install.packages("regioncode")
install.packages("regioncode")
options(repos = "https://cloud.r-project.org")
install.packages("regioncode")
setwd("~/GitHub/regioncode_new")
install.packages("regioncode")
options(repos = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/")
install.packages("regioncode")
install.packages("regioncode", method = "libcurl")
install.packages("regioncode")
https://mirrors.ustc.edu.cn/CRAN/
options(repos = "https://mirrors.ustc.edu.cn/CRAN/")
install.packages("regioncode", repos = "https://mirrors.ustc.edu.cn/CRAN/")
remove.packages("regioncode")
install.packages("regioncode")
install.packages("regioncode", repos = "https://cran.ism.ac.jp/")
R.version.string
remotes::install_github("sammo3182/regioncode")
