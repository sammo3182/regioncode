year_from <- "prov_name"
paste0(year_num, "_nickname")
},
"codeToabbre" = {
year_from <- "prov_code"
paste0(year_num, "_nickname")
},
"abbreToname" = {
year_from <- paste0(year_num, "_nickname")
"prov_name"
},
"abbreTocode" = {
year_from <- paste0(year_num, "_nickname")
"prov_code"
},
"abbreToarea" = {
year_from <- paste0(year_num, "_nickname")
"area"
}
)
ls_index <- c(year_from, year_to)
}
?switch
province = FALSE
year_from = 1999
year_to = 2015
convert_to = "code"
incomplete_name = FALSE
zhixiashi = FALSE
to_dialect = "none"
to_pinyin = FALSE
province = FALSE
# 2 Section of prefectural-level converting
if (to_dialect != "none") {
# 2-1 If convert language zone
year_from <- if (is.numeric(data_input[1]))
paste0(year_from, "_code")
else
paste0(year_from, "_name")
year_to <- if (to_dialect == "dia_group")
"pref_language_all"
else if (to_dialect == "dia_sub_group")
"dia_sub_language_all"
ls_index <- c(year_from, year_to)
} else {
# 2-2 If not convert language zone
year_from <- if (is.numeric(data_input[1]))
paste0(year_from, "_code")
else
paste0(year_from, "_name")
region_data <- region_data[!duplicated(region_data$`2019_code`), ]
year_to <- switch(
convert_to,
"code" = paste0(year_to, "_code"),
"area" = "area",
"name" = paste0(year_to, "_name"),
"rank" = paste0(year_to, "_rank")
)
ls_index <- c(year_from, year_to)
# Using the Municipal codes for within region codes
if (zhixiashi) {
region_zhixiashi <- subset(region_data, zhixiashi)
# Gathering all the needed fields
region_sname <- region_zhixiashi[grep("_sname$", names(region_zhixiashi))]
region_name <- region_zhixiashi[grep("_name$", names(region_zhixiashi))]
region_code <- region_zhixiashi[grep("_code$", names(region_zhixiashi))]
region_remain <- region_zhixiashi[!grepl(
"(_code$|_sname$|_name$|language$|_all$|_nickname$|dia_sub_group$|freq$)",
names(region_zhixiashi)
)]
# Replacing prefectural names and codes with provincial ones
region_name2 <- as.data.frame(matrix(
rep(region_zhixiashi$prov_name, ncol(region_name)),
ncol = ncol(region_name)
))
names(region_name2) <- names(region_name)
region_sname2 <- as.data.frame(matrix(
rep(region_zhixiashi$prov_sname, ncol(region_sname)),
ncol = ncol(region_sname)
))
names(region_sname2) <- names(region_sname)
region_code2 <- as.data.frame(matrix(
rep(region_zhixiashi$prov_code, ncol(region_code)),
ncol = ncol(region_code)
))
names(region_code2) <- names(region_code)
region_zhixiashi <- cbind(region_name2, region_code2, region_sname2, region_remain)
region_zhixiashi <- unique(region_zhixiashi[, order(names(region_zhixiashi))])
region_province <- unique(region_data[!grepl("language$|_all$|_nickname$|dia_sub_group$|freq$",
names(region_data))])
region_province <- region_province[, order(names(region_province))]
region_data <- rbind(region_zhixiashi, region_province)
}
}
View(index_municipal)
data_input <- as.data.frame(data_input)
names(data_input) <- ls_index[1]
data_output <- region_data[ls_index]
data_output <- unique(data_output)
?merge
?py
data_input <- as.data.frame(data_input)
names(data_input) <- ls_index[1]
data_output <- unique(region_data[ls_index])
if (incomplete_name) {
data_input[[ls_index[1]]] <- substr(data_input[[ls_index[1]]], 1, 2)
data_output[[ls_index[1]]] <- substr(data_output[[ls_index[1]]], 1, 2)
}
# Indexing to find the first match quickly and directly
index <- match(data_input[[ls_index[1]]], data_output[[ls_index[1]]])
data_output <- data_output[index, year_to]
class(data_output)
data_input <- as.data.frame(data_input)
names(data_input) <- ls_index[1]
data_output <- unique(region_data[ls_index])
if (incomplete_name) {
data_input[[ls_index[1]]] <- substr(data_input[[ls_index[1]]], 1, 2)
data_output[[ls_index[1]]] <- substr(data_output[[ls_index[1]]], 1, 2)
}
# Indexing to find the first match quickly and directly
index <- match(data_input[[ls_index[1]]], data_output[[ls_index[1]]])
data_output <- data_output[index, year_to, drop = TRUE]
regioncode <- function(data_input,
year_from = 1999,
year_to = 2015,
convert_to = "code",
incomplete_name = FALSE,
zhixiashi = FALSE,
to_dialect = "none",
to_pinyin = FALSE,
province = FALSE) {
validate_input(data_input,
year_from,
province,
to_dialect,
convert_to,
zhixiashi,
to_pinyin)
if (province) {
zhixiashi <- FALSE
# 1 Section of province-level converting
if (to_dialect != "none") {
# 1-1 If convert language zone
year_from <- if (is.numeric(data_input[1]))
"prov_code"
else
"prov_name"
ls_index <- if (to_dialect == "dia_super") {
year_to <- "prov_language"
c(year_from, year_to)
}
} else {
# 1-2 If not convert language zone
prov_data <- unique(region_data[, c("prov_code", paste0("199", 8:9, "_nickname"), "area")])
# Because province nicknames changed in 1999
year_num <- ifelse(as.numeric(year_from) < 1999, 1998, 1999)
year_from <- if (is.numeric(data_input[1]))
"prov_code"
else
"prov_name"
year_to <- switch(
convert_to,
"name" = "prov_name",
"code" = "prov_code",
"area" = "area",
"nameToabbre" = {
year_from <- "prov_name"
paste0(year_num, "_nickname")
},
"codeToabbre" = {
year_from <- "prov_code"
paste0(year_num, "_nickname")
},
"abbreToname" = {
year_from <- paste0(year_num, "_nickname")
"prov_name"
},
"abbreTocode" = {
year_from <- paste0(year_num, "_nickname")
"prov_code"
},
"abbreToarea" = {
year_from <- paste0(year_num, "_nickname")
"area"
}
)
ls_index <- c(year_from, year_to)
}
} else {
# 2 Section of prefectural-level converting
if (to_dialect != "none") {
# 2-1 If convert language zone
year_from <- if (is.numeric(data_input[1]))
paste0(year_from, "_code")
else
paste0(year_from, "_name")
year_to <- if (to_dialect == "dia_group")
"pref_language_all"
else if (to_dialect == "dia_sub_group")
"dia_sub_language_all"
ls_index <- c(year_from, year_to)
} else {
# 2-2 If not convert language zone
year_from <- if (is.numeric(data_input[1]))
paste0(year_from, "_code")
else
paste0(year_from, "_name")
region_data <- region_data[!duplicated(region_data$`2019_code`), ]
year_to <- switch(
convert_to,
"code" = paste0(year_to, "_code"),
"area" = "area",
"name" = paste0(year_to, "_name"),
"rank" = paste0(year_to, "_rank")
)
ls_index <- c(year_from, year_to)
# Using the Municipal codes for within region codes
if (zhixiashi) {
region_zhixiashi <- subset(region_data, zhixiashi)
# Gathering all the needed fields
region_sname <- region_zhixiashi[grep("_sname$", names(region_zhixiashi))]
region_name <- region_zhixiashi[grep("_name$", names(region_zhixiashi))]
region_code <- region_zhixiashi[grep("_code$", names(region_zhixiashi))]
region_remain <- region_zhixiashi[!grepl(
"(_code$|_sname$|_name$|language$|_all$|_nickname$|dia_sub_group$|freq$)",names(region_zhixiashi))]
# Replacing prefectural names and codes with provincial ones
region_name2 <- as.data.frame(matrix(
rep(region_zhixiashi$prov_name, ncol(region_name)),
ncol = ncol(region_name)
))
names(region_name2) <- names(region_name)
region_sname2 <- as.data.frame(matrix(
rep(region_zhixiashi$prov_sname, ncol(region_sname)),
ncol = ncol(region_sname)
))
names(region_sname2) <- names(region_sname)
region_code2 <- as.data.frame(matrix(
rep(region_zhixiashi$prov_code, ncol(region_code)),
ncol = ncol(region_code)
))
names(region_code2) <- names(region_code)
region_zhixiashi <- cbind(region_name2,
region_code2,
region_sname2,
region_remain)
region_zhixiashi <- unique(region_zhixiashi[, order(names(region_zhixiashi))])
region_province <- unique(region_data[!grepl("language$|_all$|_nickname$|dia_sub_group$|freq$", names(region_data))])
region_province <- region_province[, order(names(region_province))]
region_data <- rbind(region_zhixiashi, region_province)
}
}
}
# Convert the input to a data.frame for later merging
data_input <- as.data.frame(data_input)
names(data_input) <- ls_index[1]
data_output <- unique(region_data[ls_index])
if (incomplete_name) {
data_input[[ls_index[1]]] <- substr(data_input[[ls_index[1]]], 1, 2)
data_output[[ls_index[1]]] <- substr(data_output[[ls_index[1]]], 1, 2)
}
# Indexing to find the first match quickly and directly
index <- match(data_input[[ls_index[1]]], data_output[[ls_index[1]]])
data_output <- data_output[index, year_to, drop = TRUE]
# Because '2pinyin' can not be used as a variable name
if (to_pinyin) {
# Predefined mapping for special cases with Chinese characters
special_cases <- c(
"\u9655\u897f" = "shaan_xi",
"\u5185\u8499" = "inner_mongolia",
"\u897f\u85cf" = "tibet",
"\u6fb3\u95e8" = "macao",
"\u9999\u6e2f" = "hong_kong"
)
# Extract the first two characters of each entry in data_output
first_two_chars <- substr(data_output, 1, 2)
# Apply special cases mapping
special_pinyin <- special_cases[first_two_chars]
# Use py function where no special case is matched
data_output <- ifelse(is.na(special_pinyin),
py(
char = first_two_chars,
dic = pydic(method = "toneless", dic = "pinyin2")
),
special_pinyin)
}
return(data_output)
}
# Function to validate input
validate_input <- function(data_input,
year_from,
province,
to_dialect,
convert_to,
zhixiashi,
to_pinyin) {
# Simplified data type checks
if (!(is.character(data_input[1]) || is.numeric(data_input[1]))) {
stop("Invalid input: only region names or division codes are valid.")
}
# Simplify type and value checks
if (!is.numeric(year_from) ||
!all(c(province, zhixiashi, to_pinyin) %in% c(TRUE, FALSE))) {
stop("Invalid input: Parameters must be of the correct data type.")
}
# Consolidated conversion checks
valid_conversions <- if (province && to_dialect == "none") {
c(
"name",
"code",
"area",
"rank",
"nameToabbre",
"codeToabbre",
"abbreToname",
"abbreTocode",
"abbreToarea"
)
} else {
c("name", "code", "area", "rank")
}
if (!(convert_to %in% valid_conversions)) {
stop("Invalid input: please choose a valid converting method.")
}
# Specific scenario checks
if (to_pinyin && convert_to == "code" && to_dialect == "none") {
stop("Invalid input: cannot translate administrative codes to pinyin.")
}
}
regioncode(c("东城区", "梅州市"))
load("R/sysdata.rda")
p_load(pinyin)
library(pacman)
p_load(pinyin)
regioncode(c("东城区", "梅州市"))
regioncode(c("北京市", "天津市"), zhixiashi = TRUE)
regioncode(c("河北省", "河南省"), province = TRUE)
library(regioncode)
library(regioncode)
data("corruption")
# Conversion to the 1989 version
regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default setting
year_from = 2019,
year_to = 1989)
# Comparison
tibble(
code2019 = corruption$prefecture_id,
code1989 = regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default setting
year_from = 2019,
year_to = 1989),
name2019 = regioncode(data_input = corruption$prefecture_id,
convert_to = "name", # default setting
year_from = 2019,
year_to = 2019),
name1989 = regioncode(data_input = corruption$prefecture_id,
convert_to = "name", # default setting
year_from = 2019,
year_to = 1989)
)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
if(!require(regioncode)) install.packages("regioncode")
library(regioncode)
library(dplyr)
# Conversion to the 1989 version
regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default setting
year_from = 2019,
year_to = 1989)
# Comparison
tibble(
code2019 = corruption$prefecture_id,
code1989 = regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default setting
year_from = 2019,
year_to = 1989),
name2019 = regioncode(data_input = corruption$prefecture_id,
convert_to = "name", # default setting
year_from = 2019,
year_to = 2019),
name1989 = regioncode(data_input = corruption$prefecture_id,
convert_to = "name", # default setting
year_from = 2019,
year_to = 1989)
)
# Original name
tibble(
id = corruption$prefecture_id,
name = corruption$prefecture
)
# Codes to name
regioncode(data_input = corruption$prefecture_id,
convert_to = "name",
year_from = 2019,
year_to = 1989)
# Name to codes of the same year
regioncode(data_input = corruption$prefecture,
convert_to = "code",
year_from = 2019,
year_to = 2019)
# Name to name of a different year
regioncode(data_input = corruption$prefecture,
convert_to = "name",
year_from = 2019,
year_to = 1989)
# Original full names
corruption$prefecture
fake_incomplete <- corruption$prefecture
index_incomplete <- sample(seq(length(corruption$prefecture)), 7)
fake_incomplete[index_incomplete] <- fake_incomplete[index_incomplete] |>
substr(start = 1, stop = 2)
fake_incomplete
# Conversion to full names in 2008
regioncode(data_input = fake_incomplete,
convert_to = "name",
year_from = 2019,
year_to = 2008,
incomplete_name = TRUE)
names_municipality <- c("北京市", # Beijing, a municipality
"海淀区", # A district of Beijing
"上海市", # Shanghai, a municipality
"静安区", # A district of Shanghai
"济南市") # A prefecture of Shandong
# When `zhixiashi` is FALSE, only the districts are recognized
regioncode(data_input = names_municipality,
year_from = 2019,
year_to = 2019,
convert_to = "code",
zhixiashi = FALSE)
# When `zhixiashi` is TRUE, municipalities are recognized
regioncode(data_input = names_municipality,
year_from = 2019,
year_to = 2019,
convert_to = "code",
zhixiashi = TRUE)
tibble(
city = corruption$prefecture,
rank1989 = regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
convert_to="rank"),
rank2014 = regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 2014,
convert_to = "rank")
)
tibble(
city = corruption$prefecture,
cityPY = regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
convert_to = "name",
to_pinyin = TRUE
),
areaPY = regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
convert_to = "area",
to_pinyin = TRUE
)
)
# Regions with special spelling
regioncode(data_input = c("山西", "陕西", "内蒙古", "香港", "澳门"),
year_from = 2019,
year_to = 2008,
convert_to = "name",
incomplete_name = TRUE,
province = TRUE,
to_pinyin = TRUE
)
tibble(
province = corruption$province_id,
prov_name = regioncode(data_input = corruption$province_id,
convert_to = "name",
year_from = 2019,
year_to = 1989,
province = TRUE),
prov_abbre = regioncode(data_input = corruption$province_id,
convert_to = "codeToabbre",
year_from = 2019,
year_to = 1989,
province = TRUE)
)
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
convert_to = "area")
tibble(
city = corruption$prefecture,
dialectGroup = regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
to_dialect = "dia_group"),
dialectSubGroup = regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
to_dialect = "dia_sub_group")
)
pkgbuild::check_build_tools(debug = TRUE)
library(devtools)
detach("package:devtools", unload = TRUE)
install.packages("devtools")
pkgbuild::check_build_tools(debug = TRUE)
load("D:/Seafile/WW_research/01_Research/R_package/regioncode/R/sysdata.rda")
View(region_data)
load("D:/Seafile/WW_research/01_Research/R_package/regioncode/R/sysdata.rda")
library(dplyr)
names(region_data)
regioncode("黑龙江",convert_to = "name",
incomplete_name = TRUE,
zhixiashi = TRUE,
province = TRUE)
