incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
# Updating the year_from/to after the evaluation of `incompleteName`
if (incompleteName != "none") {
year_from <- ls_index[1]
year_to <- ls_index[2]
}
# Convert the input to a data.frame for later merging
df_input <- data_input %>% as.data.frame()
names(df_input) <- ls_index[1]
data_output <-
select(region_table, !!ls_index) %>%
distinct() %>%
left_join(df_input, .) %>%
# using left_join to keep the order of the input data
pull(!!year_to)
# Because '2pinyin' can not be used as a variable name
if (topinyin) {
if (is.character(data_output)) {
data_output <-
py(
char = data_output,
dic = pydic(convert_to = "toneless", dic = "pinyin2")
)
}
}
return(data_output)
}
# original geocodes. It's 2019 version
corruption$prefecture_id
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(regioncode)
data("corruption")
# original geocodes. It's 2019 version
corruption$prefecture_id
corruption <- sample_n(na.exclude(corruption), 10)
corruption <- dplyr::sample_n(na.exclude(corruption), 10)
View(corruption)
set.seed(313)
corruption <- dplyr::sample_n(na.exclude(corruption), 10)
View(corruption)
set.seed(313)
corruption <- dplyr::sample_n(na.exclude(corruption), 10) %>%
select(province:countyid)
library(dplry)
library(dplyr)
set.seed(313)
corruption <- dplyr::sample_n(na.exclude(corruption), 10) %>%
select(province:countyid)
set.seed(313)
corruption <- dplyr::sample_n(na.exclude(corruption), 10) %>%
select(province:county_id)
View(corruption)
save(corruption, "../data/corruption.rda")
getwd()
save(corruption, "data/corruption.rda")
?save
save(corruption, file =  "../data/corruption.rda")
# original geocodes. It's 2019 version
corruption$prefecture_id
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999)
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999,
convert_to = "area")
regioncode <- function(data_input,
year_from = 1999,
year_to = 2015,
todialect = "none",
convert_to = "code",
topinyin = FALSE,
province = FALSE,
zhixiashi = FALSE,
incompleteName = "none") {
# check out input param type
if (!is.character(data_input) & !is.numeric(data_input)) {
stop(
"Invalid input: only region names as a character vector or division codes as an integer vector are valid."
)
}
if (!is.numeric(year_from)) {
stop("Invalid input: Converting years must be integers.")
}
if (province) {
if (todialect != "none") {
if (todialect != "dia_super") {
stop("Invalid input: please choose a valid converting transformation.")
}
} else {
if (!(
convert_to %in% c(
"name",
"code",
"area",
"nameToabbre",
"codeToabbre",
"abbreToname",
"abbreTocode",
"abbreToarea"
)
)) {
stop("Invalid input: please choose a valid converting method.")
}
}
} else if (todialect != "none") {
if (!(todialect %in% c("dia_group", "dia_sub_group"))) {
stop("Invalid input: please choose a valid converting transformation.")
}
} else {
if (!(convert_to %in% c("name", "code", "area"))) {
stop("Invalid input: please choose a valid converting method.")
}
}
if (!(incompleteName %in% c("none", "from", "to", "both"))) {
stop(
"Invalid input: the options of `incompleteName` are one of 'none', 'from', 'to', and 'both'."
)
}
if (!(incompleteName == "to") & data_input == "code") {
stop("Invalid input: can not complete administrative codes.")
}
if (!is.logical(province)) {
stop("Invalid input: param `zhixiashi` must be logical class.")
}
if (!is.character(todialect)) {
stop("Invalid input: param `todialect` must be character class.")
}
# if (language_zone &  !grepl('_name', data_input, fixed = TRUE))
#   stop(
#     'Invalid input: current version is not supported sname or code as language_zone input.'
#   )
if (!is.logical(zhixiashi)) {
stop("Invalid input: param `zhixiashi` must be logical class.")
}
if (!is.logical(topinyin)) {
stop("Invalid input: param `topinyin` must be logical class.")
}
if (topinyin & convert_to == "code" & todialect == FALSE) {
stop("Invalid input: can not translate administrative codes to pinyin.")
}
if (province) {
# 1 Section of province-level converting
if (todialect != "none") {
# 1-1 If convert language zone
if (is.numeric(data_input)) {
year_from <- "prov_code"
}
if (is.character(data_input)) {
year_from <- "prov_name"
}
ls_index <- switch(todialect,
"dia_super" = {
year_to <- "prov_language"
c(year_from, year_to)
}
)
} else {
# 1-2 If not convert language zone
prov_table <- region_table %>%
select(prov_code:`1999_nickname`) %>%
distinct()
# Because province nicknames changed in 1999
year_from <- ifelse(year_from < 1999, 1998, 1999)
year_to <- ifelse(year_to < 1999, 1998, 1999)
ls_index <- switch(convert_to,
"name" = {
year_to <- "prov_name"
c(year_from, year_to)
},
"code" = {
year_to <- "prov_code"
c(year_from, year_to)
},
"area" = {
year_to <- "area"
c(year_from, year_to)
},
"nameToabbre" = {
year_from <- "prov_name"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"codeToabbre" = {
year_from <- "prov_code"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"abbreToname" = {
year_from <- paste0(year_to, "_nickname")
year_to <- "prov_name"
c(year_from, year_to)
},
"abbreTocode" = {
year_from <- paste0(year_to, "_nickname")
year_to <- "prov_code"
c(year_from, year_to)
},
"abbreToarea" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "area"
c(year_from, year_to)
}
)
}
} else {
# 2 Section of prefectural-level converting
if (todialect != "none") {
# 2-1 If convert language zone
if (is.numeric(data_input)) {
year_from <- paste0(year_from, "_code")
}
if (is.character(data_input)) {
year_from <- paste0(year_from, "_name")
}
ls_index <- switch(todialect,
"dia_group" = {
year_to <- "pref_language"
c(year_from, year_to)
},
"dia_sub_group" = {
year_to <- "dia_sub_language"
c(year_from, year_to)
}
)
} else {
# 2-2 If not convert language zone
if (is.numeric(data_input)) {
year_from <- paste0(year_from, "_code")
}
if (is.character(data_input)) {
year_from <- paste0(year_from, "_name")
}
ls_index <- switch(convert_to,
"code" = {
year_to <- paste0(year_to, "_code")
c(year_from, year_to)
},
"area" = {
year_to <- "area"
c(year_from, year_to)
},
"name" = {
year_to <- paste0(year_to, "_name")
c(year_from, year_to)
}
)
# Using the Municipal codes for within region codes
if (zhixiashi) {
region_zhixiashi <- region_table %>%
filter(zhixiashi)
region_sname <- region_zhixiashi %>%
select(ends_with("_sname"))
region_name <- region_zhixiashi %>%
select(ends_with("_name"))
region_code <- region_zhixiashi %>%
select(ends_with("_code"))
# replacing the prefectural names and codes with provincial names and codes
region_sname2 <-
replicate(ncol(region_sname), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_sname2) <- names(region_sname)
region_name2 <-
replicate(ncol(region_name), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_name2) <- names(region_name)
region_code2 <-
replicate(ncol(region_code), region_zhixiashi$prov_code) %>%
as.data.frame()
names(region_code2) <- names(region_code)
region_zhixiashi <-
bind_cols(region_sname2, region_name2, region_code2)
region_zhixiashi <-
region_zhixiashi[, order(colnames(region_zhixiashi))]
region_province <- region_table %>%
filter(!zhixiashi)
region_province <-
region_province[, order(colnames(region_province))]
region_table <- bind_rows(region_zhixiashi, region_province)
}
}
}
# When using sname instead of the official name
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
# Updating the year_from/to after the evaluation of `incompleteName`
if (incompleteName != "none") {
year_from <- ls_index[1]
year_to <- ls_index[2]
}
# Convert the input to a data.frame for later merging
df_input <- data_input %>% as.data.frame()
names(df_input) <- ls_index[1]
data_output <-
select(region_table, !!ls_index) %>%
distinct() %>%
left_join(df_input, .) %>%
# using left_join to keep the order of the input data
pull(!!year_to)
# Because '2pinyin' can not be used as a variable name
if (topinyin) {
if (is.character(data_output)) {
data_output <-
py(
char = data_output,
dic = pydic(convert_to = "toneless", dic = "pinyin2")
)
}
}
return(data_output)
}
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999,
convert_to = "area")
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999)
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1999,
province = F,
convert_to="area",
topinyin=TRUE
)
library(regioncode)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(regioncode)
data("corruption")
# original geocodes. It's 2019 version
corruption$prefecture_id
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999,
convert_to = "area")
library(regioncode)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(regioncode)
data("corruption")
# original geocodes. It's 2019 version
corruption$prefecture_id
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999,
convert_to = "area")
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999)
# original geocodes. It's 2019 version
corruption$prefecture_id
load("D:/Dropbox/Seafile/WW/01_Instruction/Research/R packages/regioncode/R/sysdata.rda")
View(region_table)
View(region_table)
library(regioncode)
data("corruption")
# Original 2019 version
corruption$prefecture_id
# 1999 version
regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default set
year_from = 2019,
year_to = 1999)
# 1999 version
regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default set
year_from = 2019,
year_to = 1989)
library(regioncode)
data("corruption")
# Original 2019 version
corruption$prefecture_id
# 1999 version
regioncode(data_input = corruption$prefecture_id,
convert_to = "code", # default set
year_from = 2019,
year_to = 1989)
# Codes to name
regioncode(data_input = corruption$prefecture_id,
convert_to = "name",
year_from = 2019,
year_to = 1989)
# Name to codes of the same year
regioncode(data_input = corruption$prefecture,
convert_to = "name",
year_from = 2019,
year_to = 2019)
# Name to name of a different year
regioncode(data_input = corruption$prefecture,
convert_to = "name",
year_from = 2019,
year_to = 1989)
corruption$prefecture
# The original name
corruption$prefecture
# Codes to name
regioncode(data_input = corruption$prefecture_id,
convert_to = "name",
year_from = 2019,
year_to = 1989)
# Name to codes of the same year
regioncode(data_input = corruption$prefecture,
convert_to = "code",
year_from = 2019,
year_to = 2019)
# Name to name of a different year
regioncode(data_input = corruption$prefecture,
convert_to = "name",
year_from = 2019,
year_to = 1989)
library(regioncode)
library(regioncode)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Full, official names
corruption$prefecture
regioncode(data_input = corruption$prefecture,
convert_to = "name",
year_from = 2019,
year_to = 1989,
incomplete_name = "to")
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1999,
convert_to="area")
library(regioncode)
library(regioncode)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
to_dialect = "dia_group")
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
to_dialect = "sub_dia_group")
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1989,
to_dialect = "dia_sub_group")
library(devtools)
build_vignettes()
build_vignettes()
library(regioncode)
library(devtools)
build_vignettes()
library(regioncode)
vignette(regioncode)
build()
?build_vignettes
browseVignettes()
browseVignettes("regioncode")
devtools::build_vignettes()
library(regioncode)
?build_vignettes()
build_vignettes()
library(regioncode)
build_vignettes(clean = FALSE)
library(regioncode)
library(regioncode)
library(devtools)
release()
spell_check()
library(regioncode)
release()
?release
release(args = "clean_doc = FALSE")
release()
library(regioncode)
library(regioncode)
load("R/sysdata.rda")
library(regioncode)
library(regioncode)
regioncode::regioncode("宁夏回族自治区",
+                        year_from = 2015,
regioncode::regioncode(
"宁夏回族自治区",
year_from = 2015,
year_to = 2015,
convert_to = "name",
incomplete_name = "to",
province = TRUE
)
library(here)
region_table$prov_name[region_table$prov_sname == "宁夏"]
load("D:/Seafile/WW_research/01_Research/R_package/regioncode/R/sysdata.rda")
region_table$prov_name[region_table$prov_sname == "宁夏"]
region_table$prov_name[region_table$prov_sname == "宁夏"] <- "宁夏回族自治区"
save(region_table, corruption, file = here("R", "sysdata.rda"))
library(regioncode)
regioncode::regioncode(
"宁夏回族自治区",
year_from = 2015,
year_to = 2015,
convert_to = "name",
incomplete_name = "to",
province = TRUE
)
library(regioncode)
library(regioncode)
