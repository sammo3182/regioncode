"name2name" = {
year_from <- "prov_name"
year_to <- "prov_name"
c(year_from, year_to)
},
"name2abbre" = {
year_from <- "prov_name"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"abbre2name" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_name"
c(year_from, year_to)
},
"abbre2code" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_code"
c(year_from, year_to)
}
)
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
# Updating the year_from/to after the evaluation of `incompleteName`
if (incompleteName != "none") {
year_from <- ls_index[1]
year_to <- ls_index[2]
}
df_input <- data_input %>% as.data.frame
names(df_input) <- ls_index[1]
select(region_table, !!ls_index) %>%
distinct() %>%
right_join(df_input)
select(region_table, !!ls_index) %>%
distinct()
?right_join
select(region_table, !!ls_index) %>%
distinct() %>%
left_join(df_input,.)
select(region_table, !!ls_index) %>%
distinct() %>%
left_join(df_input,.) %>% # using left_join to keep the order of the input data
pull(!!year_to)
regioncode <- function(data_input,
year_from = 1999,
year_to = 2015,
method = "code2code",
province = FALSE,
zhixiashi = TRUE,
incompleteName = "none") {
if (!is.character(data_input) & !is.numeric(data_input))
stop(
'Invalid input: only region names as a character vector or division codes as an integer vector are valid.'
)
if (!is.numeric(year_from))
stop("Invalid input: Converting years must be integers.")
if (!(method %in% c('code2name', 'code2code', 'name2name', 'name2code')))
stop("Invalid input: please choose a valid converting method.")
if (!(incompleteName %in% c("none", "from", "to", "both")))
stop(
"Invalid input: the options of `incompleteName` are one of 'none', 'from', 'to', and 'both'."
)
if (province) {
if (method == 'code2code')
stop(
"Invalid input: there is no provincial level code converting. You may want to set the argument `province` to FALSE."
)
prov_table <- region_table %>%
select(prov_code:`1999_nickname`) %>%
distinct
year_from <- ifelse(year_from < 1999, 1998, 1999)
year_to <- ifelse(year_to < 1999, 1998, 1999)
ls_index <- switch (
method,
"code2name" = {
year_from <- "prov_code"
year_to <- "prov_name"
c(year_from, year_to)
},
"code2abbre" = {
year_from <- "prov_code"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"name2code" = {
year_from <- "prov_name"
year_to <- "prov_code"
c(year_from, year_to)
},
"name2name" = {
year_from <- "prov_name"
year_to <- "prov_name"
c(year_from, year_to)
},
"name2abbre" = {
year_from <- "prov_name"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"abbre2name" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_name"
c(year_from, year_to)
},
"abbre2code" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_code"
c(year_from, year_to)
}
)
} else {
# when doing prefectural level converting
ls_index <- switch(
method,
"code2code" = {
year_from <- paste0(year_from, '_code')
year_to <- paste0(year_to, '_code')
c(year_from, year_to)
},
"code2name" = {
year_from <- paste0(year_from, '_code')
year_to <- paste0(year_to, '_name')
c(year_from, year_to)
},
"name2code" = {
year_from <- paste0(year_from, '_name')
year_to <- paste0(year_to, '_code')
c(year_from, year_to)
},
"name2name" = {
year_from <- paste0(year_from, '_name')
year_to <- paste0(year_to, '_name')
c(year_from, year_to)
}
)
# Using the Municipal codes for within region codes
if (zhixiashi) {
region_zhixiashi <- region_table %>%
filter(zhixiashi)
region_sname <- region_zhixiashi %>%
select(ends_with("_sname"))
region_name <- region_zhixiashi %>%
select(ends_with("_name"))
region_code <- region_zhixiashi %>%
select(ends_with("_code"))
# replacing the prefectural names and codes with provincial names and codes
region_sname2 <-
replicate(ncol(region_sname), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_sname2) <- names(region_sname)
region_name2 <-
replicate(ncol(region_name), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_name2) <- names(region_name)
region_code2 <-
replicate(ncol(region_code), region_zhixiashi$prov_code) %>%
as.data.frame()
names(region_code2) <- names(region_code)
region_zhixiashi <-
bind_cols(region_sname2, region_name2, region_code2)
region_zhixiashi <-
region_zhixiashi[, order(colnames(region_zhixiashi))]
region_province <- region_table %>%
filter(!zhixiashi)
region_province <-
region_province[, order(colnames(region_province))]
region_table <- bind_rows(region_zhixiashi, region_province)
}
}
# When using sname instead of the official name
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
# Updating the year_from/to after the evaluation of `incompleteName`
if (incompleteName != "none") {
year_from <- ls_index[1]
year_to <- ls_index[2]
}
# Convert the input to a data.frame for later merging
df_input <- data_input %>% as.data.frame
names(df_input) <- ls_index[1]
data_output <-
select(region_table, !!ls_index) %>%
distinct() %>%
left_join(df_input,.) %>% # using left_join to keep the order of the input data
pull(!!year_to)
return(data_output)
}
regioncode(data_input = data_input, province = TRUE, method = "name2name", incompleteName = "to")
data_input <- regioncode(data_input = data_input, province = TRUE, method = "name2name", incompleteName = "to")
regioncode(data_input = data_input, province = TRUE, method = "name2name", incompleteName = "from")
data_input <- c("湖南省", "天津市", "内蒙古自治区")
regioncode(data_input = data_input, province = TRUE, method = "name2code", incompleteName = "from")
data_input <- c("湖南省", "天津市", "内蒙古自治区")
data_input <- regioncode(data_input = data_input, province = TRUE, method = "name2code", incompleteName = "to")
data_input <- c("湖南省", "天津市", "内蒙古自治区")
data_input <- regioncode(data_input = data_input, province = TRUE, method = "name2code", incompleteName = "none")
data_input <- regioncode(data_input = data_input, province = TRUE, method = "name2code", incompleteName = "from")
data_input <- c("湖南省", "天津市", "内蒙古自治区")
data_input <- regioncode(data_input = data_input, province = TRUE, method = "name2abbre", incompleteName = "from")
data_input <- c("湖南省", "天津市", "内蒙古自治区")
data_input <- regioncode(data_input = data_input, province = TRUE, method = "name2abbre")
regioncode <- function(data_input,
year_from = 1999,
year_to = 2015,
method = "code2code",
province = FALSE,
zhixiashi = TRUE,
incompleteName = "none") {
if (!is.character(data_input) & !is.numeric(data_input))
stop(
'Invalid input: only region names as a character vector or division codes as an integer vector are valid.'
)
if (!is.numeric(year_from))
stop("Invalid input: Converting years must be integers.")
if(province){
if (!(method %in% c('code2name', 'code2abbre', 'name2name', 'name2code', 'name2abbre', 'abbre2name', 'abbre2code')))
stop("Invalid input: please choose a valid converting method.")
} else {
if (!(method %in% c('code2name', 'code2code', 'name2name', 'name2code')))
stop("Invalid input: please choose a valid converting method.")
}
if (!(incompleteName %in% c("none", "from", "to", "both")))
stop(
"Invalid input: the options of `incompleteName` are one of 'none', 'from', 'to', and 'both'."
)
if (province) {
if (method == 'code2code')
stop(
"Invalid input: there is no provincial level code converting. You may want to set the argument `province` to FALSE."
)
prov_table <- region_table %>%
select(prov_code:`1999_nickname`) %>%
distinct
year_from <- ifelse(year_from < 1999, 1998, 1999)
year_to <- ifelse(year_to < 1999, 1998, 1999)
ls_index <- switch (
method,
"code2name" = {
year_from <- "prov_code"
year_to <- "prov_name"
c(year_from, year_to)
},
"code2abbre" = {
year_from <- "prov_code"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"name2code" = {
year_from <- "prov_name"
year_to <- "prov_code"
c(year_from, year_to)
},
"name2name" = {
year_from <- "prov_name"
year_to <- "prov_name"
c(year_from, year_to)
},
"name2abbre" = {
year_from <- "prov_name"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"abbre2name" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_name"
c(year_from, year_to)
},
"abbre2code" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_code"
c(year_from, year_to)
}
)
} else {
# when doing prefectural level converting
ls_index <- switch(
method,
"code2code" = {
year_from <- paste0(year_from, '_code')
year_to <- paste0(year_to, '_code')
c(year_from, year_to)
},
"code2name" = {
year_from <- paste0(year_from, '_code')
year_to <- paste0(year_to, '_name')
c(year_from, year_to)
},
"name2code" = {
year_from <- paste0(year_from, '_name')
year_to <- paste0(year_to, '_code')
c(year_from, year_to)
},
"name2name" = {
year_from <- paste0(year_from, '_name')
year_to <- paste0(year_to, '_name')
c(year_from, year_to)
}
)
# Using the Municipal codes for within region codes
if (zhixiashi) {
region_zhixiashi <- region_table %>%
filter(zhixiashi)
region_sname <- region_zhixiashi %>%
select(ends_with("_sname"))
region_name <- region_zhixiashi %>%
select(ends_with("_name"))
region_code <- region_zhixiashi %>%
select(ends_with("_code"))
# replacing the prefectural names and codes with provincial names and codes
region_sname2 <-
replicate(ncol(region_sname), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_sname2) <- names(region_sname)
region_name2 <-
replicate(ncol(region_name), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_name2) <- names(region_name)
region_code2 <-
replicate(ncol(region_code), region_zhixiashi$prov_code) %>%
as.data.frame()
names(region_code2) <- names(region_code)
region_zhixiashi <-
bind_cols(region_sname2, region_name2, region_code2)
region_zhixiashi <-
region_zhixiashi[, order(colnames(region_zhixiashi))]
region_province <- region_table %>%
filter(!zhixiashi)
region_province <-
region_province[, order(colnames(region_province))]
region_table <- bind_rows(region_zhixiashi, region_province)
}
}
# When using sname instead of the official name
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
# Updating the year_from/to after the evaluation of `incompleteName`
if (incompleteName != "none") {
year_from <- ls_index[1]
year_to <- ls_index[2]
}
# Convert the input to a data.frame for later merging
df_input <- data_input %>% as.data.frame
names(df_input) <- ls_index[1]
data_output <-
select(region_table, !!ls_index) %>%
distinct() %>%
left_join(df_input,.) %>% # using left_join to keep the order of the input data
pull(!!year_to)
return(data_output)
}
data_input <- c("湖南省", "天津市", "内蒙古自治区")
data_input <- regioncode(data_input = data_input, province = TRUE, method = "name2abbre")
data_input <- regioncode(data_input = data_input, province = TRUE, year_to = 1998, method = "name2abbre")
year_to = 1998
method = "name2abbre"
if (province) {
if (method == 'code2code')
stop(
"Invalid input: there is no provincial level code converting. You may want to set the argument `province` to FALSE."
)
prov_table <- region_table %>%
select(prov_code:`1999_nickname`) %>%
distinct
year_from <- ifelse(year_from < 1999, 1998, 1999)
year_to <- ifelse(year_to < 1999, 1998, 1999)
ls_index <- switch (
method,
"code2name" = {
year_from <- "prov_code"
year_to <- "prov_name"
c(year_from, year_to)
},
"code2abbre" = {
year_from <- "prov_code"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"name2code" = {
year_from <- "prov_name"
year_to <- "prov_code"
c(year_from, year_to)
},
"name2name" = {
year_from <- "prov_name"
year_to <- "prov_name"
c(year_from, year_to)
},
"name2abbre" = {
year_from <- "prov_name"
year_to <- paste0(year_to, "_nickname")
c(year_from, year_to)
},
"abbre2name" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_name"
c(year_from, year_to)
},
"abbre2code" = {
year_from <- paste0(year_from, "_nickname")
year_to <- "prov_code"
c(year_from, year_to)
}
)
} else {
# when doing prefectural level converting
ls_index <- switch(
method,
"code2code" = {
year_from <- paste0(year_from, '_code')
year_to <- paste0(year_to, '_code')
c(year_from, year_to)
},
"code2name" = {
year_from <- paste0(year_from, '_code')
year_to <- paste0(year_to, '_name')
c(year_from, year_to)
},
"name2code" = {
year_from <- paste0(year_from, '_name')
year_to <- paste0(year_to, '_code')
c(year_from, year_to)
},
"name2name" = {
year_from <- paste0(year_from, '_name')
year_to <- paste0(year_to, '_name')
c(year_from, year_to)
}
)
# Using the Municipal codes for within region codes
if (zhixiashi) {
region_zhixiashi <- region_table %>%
filter(zhixiashi)
region_sname <- region_zhixiashi %>%
select(ends_with("_sname"))
region_name <- region_zhixiashi %>%
select(ends_with("_name"))
region_code <- region_zhixiashi %>%
select(ends_with("_code"))
# replacing the prefectural names and codes with provincial names and codes
region_sname2 <-
replicate(ncol(region_sname), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_sname2) <- names(region_sname)
region_name2 <-
replicate(ncol(region_name), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_name2) <- names(region_name)
region_code2 <-
replicate(ncol(region_code), region_zhixiashi$prov_code) %>%
as.data.frame()
names(region_code2) <- names(region_code)
region_zhixiashi <-
bind_cols(region_sname2, region_name2, region_code2)
region_zhixiashi <-
region_zhixiashi[, order(colnames(region_zhixiashi))]
region_province <- region_table %>%
filter(!zhixiashi)
region_province <-
region_province[, order(colnames(region_province))]
region_table <- bind_rows(region_zhixiashi, region_province)
}
}
incompleteName <- "none"
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
df_input <- data_input %>% as.data.frame
data_input <- c("湖南省", "天津市", "内蒙古自治区")
df_input <- data_input %>% as.data.frame
names(df_input) <- ls_index[1]
data_output <-
select(region_table, !!ls_index) %>%
distinct() %>%
left_join(df_input,.) %>% # using left_join to keep the order of the input data
pull(!!year_to)
data_input <- c("湖南省", "天津市", "内蒙古自治区")
data_input <- regioncode(data_input = data_input, province = TRUE, year_to = 1998, method = "name2abbre")
library(regioncode)
install.packages(c("emmeans", "magick", "missRanger", "ragg", "RCurl", "sf", "units", "XML"))
library(regioncode)
library(regioncode)
regioncode(64000)
regioncode(640000)
regioncode(140000)
Sys.setlocale(category = "LC_COLLATE", locale = "Chinese")
Sys.setlocale(category = "LC_CTYPE", locale = "Chinese")
load("R/sysdata.rda")
library(dplyr)
year_from = 1999
year_to = 2015
method = "code2code"
province = FALSE
zhixiashi = TRUE
incompleteName = "none"
View(region_table)
library(devtools)
devtools::build()
