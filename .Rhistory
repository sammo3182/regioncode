}
#爬取每年的网站链接#
year_link <- vector("list", 3)
for(i in 1:3)
{
year_link_m[[i]] <- html_nodes(web[[i]], "div.alist a") %>% html_attr("href")
i = i+1
}
head(year_link_m)
for(i in 1:3)
{
year_link[[i]] <- paste0("http://www.mca.gov.cn", year_link_m[[i]])
i = i+1
}
install.packages("XML")
#爬取主页面#
web <- vector("list", 3)
web_base <- "http://www.mca.gov.cn/article/sj/xzqh/1980/?"
web[[1]] <- read_html(web_base)
for(i in 1:2)
{
web_m <- paste0(web_base,i+1)
web[[i+1]] <- read_html(web_m)
i = i+1
}
#爬取每年的网站链接#
year_link <- vector("list", 3)
for(i in 1:3)
{
year_link_m[[i]] <- html_nodes(web[[i]], "div.alist a") %>% html_attr("href")
i = i+1
}
head(year_link_m)
for(i in 1:3)
{
year_link[[i]] <- paste0("http://www.mca.gov.cn", year_link_m[[i]])
i = i+1
}
#爬取每年的网站链接#
year_link <- vector("list", 3)
year_link_m <- vector("list", 3)
for(i in 1:3)
{
year_link_m[[i]] <- html_nodes(web[[i]], "div.alist a") %>% html_attr("href")
i = i+1
}
head(year_link_m)
for(i in 1:3)
{
year_link[[i]] <- paste0("http://www.mca.gov.cn", year_link_m[[i]])
i = i+1
}
View(year_link_m)
head(year_link)
2019 - 1986
load("./R/data/region_data_all.rda")
class("good")
?switch
library(dplyr)
?case_when
library(regioncode)
4000
library(dplyr)
region_table <- readRDS("../data/region_data_all.rds")
region_table <- readRDS("data/region_data_all.rds")
name_zhixiashi <- c("北京", "天津", "上海", "重庆")
region_table <- region_table %>%
mutate(zhixiashi = prov_name %in% name_zhixiashi)
saveRDS("data/region_data_all.rds")
saveRDS(region_table, "data/region_data_all.rds")
library(regioncode)
library(regioncode)
save(region_table, "../data/region_data_all.rda")
save(region_table, "data/region_data_all.rda")
saveRDS(region_table, "data/region_data_all.rda")
load("data/region_data_all.rda")
region_table <- readRDS("data/region_data_all.rds")
?save
save(region_table, "data/region_data_all.Rdata")
save(region_table, "data/region_data_all.RData")
save(region_table, "region_data_all.RData")
save(region_table, file = "data/region_data_all.RData")
load("data/region_data_all.RData")
library(regioncode)
library(regioncode)
usethis::use_build_ignore("data_preparation")
library(regioncode)
library(regioncode)
df_toy <- readRDS("data/df_toy.rds")
View(df_toy)
load("D:/Dropbox/Seafile/WW/01_Instruction/Research/R packages/regioncode/dev/corruption_data.rda")
load("corruption_data.rda")
load("dev/corruption_data.rda")
Sys.setlocale(category = "LC_COLLATE", locale = "Chinese")
Sys.setlocale(category = "LC_CTYPE", locale = "Chinese")
load("dev/corruption_data.rda")
library(dplyr)
?sample_n
df_toy <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2)
set.seed(313)
load("dev/corruption_data.rda")
df_toy <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2)
usethis::use_data(df_toy)
load("data/region_data_all.RData")
name_zhixiashi <- c("北京","天津", "上海", "重庆")
region_table <- region_table %>%
mutate(zhixiashi = prov_name %in% name_zhixiashi)
usethis::use_data(region_table)
?usethis::use_data
set.seed(313)
# Toy data for illustration
load("dev/corruption_data.rda")
toy <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2)
usethis::use_data(toy, overwrite = TRUE)
set.seed(313)
# Toy data for illustration
load("dev/corruption_data.rda")
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2)
usethis::use_data(corruption, overwrite = TRUE)
?data
library(regioncode)
data(corruption)
force(corruption)
library(regioncode)
library(regioncode)
load("dev/corruption_data.rda")
set.seed(313)
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2)
View(corruption)
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2) %>%
ungroup() %>%
mutate(prefecture_sname = gsub("市|县|自治.*$", "", prefecture))
set.seed(313)
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2) %>%
ungroup() %>%
mutate(prefecture_sname = gsub("市|县|.*族自治.*$", "", prefecture))
set.seed(313)
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2) %>%
ungroup() %>%
mutate(prefecture_sname = gsub("市|区|县|.*族自治.*$", "", prefecture))
set.seed(313)
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2) %>%
ungroup() %>%
mutate(prefecture_sname = gsub("市|区|县|\\w{1,2}族自治.*$", "", prefecture))
?gsub
gsub("市|区|县|[\\p{Han}{1, 2}]自治.*$", "", "石柱土家族自治县", perl = TRUE)
gsub("市|区|县|[\\p{Han}]族自治.*$", "", "石柱土家族自治县", perl = TRUE)
gsub("市|区|县|\\p{Han}{2}族自治.*$", "", "石柱土家族自治县", perl = TRUE)
set.seed(313)
load("dev/corruption_data.rda")
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2) %>%
ungroup() %>%
mutate(prefecture_sname = gsub("市|区|县|[\\p{Han}]自治.*$", "", prefecture, perl = TRUE))
ls_official <- c("壮族自治.*$|回族自治.*$|满族自治.*$|维吾尔族自治.*$|苗族自治.*$|彝族自治.*$|土家族自治.*$|藏族自治.*$|蒙古族自治.*$|侗族自治.*$|布依族自治.*$|瑶族自治.*$|白族自治.*$|朝鲜族自治.*$|哈尼族自治.*$|黎族自治.*$|哈萨克族自治.*$|傣族自治.*$|畲族自治.*$|傈僳族自治.*$|东乡族自治.*$|仡佬族自治.*$|拉祜族自治.*$|佤族自治.*$|水族自治.*$|纳西族自治.*$| 羌族自治.*$| 土族自治.*$| 仫佬族自治.*$| 锡伯族自治.*$| 柯尔克孜族自治.*$|景颇族自治.*$|达斡尔族自治.*$|撒拉族自治.*$|布朗族自治.*$|毛南族自治.*$|塔吉克族自治.*$|普米族自治.*$|阿昌族自治.*$|怒族自治.*$|鄂温克族自治.*$|京族自治.*$|基诺族自治.*$|德昂族自治.*$|保安族自治.*$|俄罗斯族自治.*$|裕固族自治.*$|乌孜别克族自治.*$|门巴族自治.*$|鄂伦春族自治.*$|独龙族自治.*$|赫哲族自治.*$|高山族自治.*$|珞巴族自治.*$|塔塔尔族自治.*$|市|区|州|县")
name_official <- c("壮族自治.*$|回族自治.*$|满族自治.*$|维吾尔族自治.*$|苗族自治.*$|彝族自治.*$|土家族自治.*$|藏族自治.*$|蒙古族自治.*$|侗族自治.*$|布依族自治.*$|瑶族自治.*$|白族自治.*$|朝鲜族自治.*$|哈尼族自治.*$|黎族自治.*$|哈萨克族自治.*$|傣族自治.*$|畲族自治.*$|傈僳族自治.*$|东乡族自治.*$|仡佬族自治.*$|拉祜族自治.*$|佤族自治.*$|水族自治.*$|纳西族自治.*$| 羌族自治.*$| 土族自治.*$| 仫佬族自治.*$| 锡伯族自治.*$| 柯尔克孜族自治.*$|景颇族自治.*$|达斡尔族自治.*$|撒拉族自治.*$|布朗族自治.*$|毛南族自治.*$|塔吉克族自治.*$|普米族自治.*$|阿昌族自治.*$|怒族自治.*$|鄂温克族自治.*$|京族自治.*$|基诺族自治.*$|德昂族自治.*$|保安族自治.*$|俄罗斯族自治.*$|裕固族自治.*$|乌孜别克族自治.*$|门巴族自治.*$|鄂伦春族自治.*$|独龙族自治.*$|赫哲族自治.*$|高山族自治.*$|珞巴族自治.*$|塔塔尔族自治.*$|市|区|州|县")
gsub(name_official, "", "石柱土家族自治县", perl = TRUE)
set.seed(313)
name_official <- c("壮族自治.*$|回族自治.*$|满族自治.*$|维吾尔族自治.*$|苗族自治.*$|彝族自治.*$|土家族自治.*$|藏族自治.*$|蒙古族自治.*$|侗族自治.*$|布依族自治.*$|瑶族自治.*$|白族自治.*$|朝鲜族自治.*$|哈尼族自治.*$|黎族自治.*$|哈萨克族自治.*$|傣族自治.*$|畲族自治.*$|傈僳族自治.*$|东乡族自治.*$|仡佬族自治.*$|拉祜族自治.*$|佤族自治.*$|水族自治.*$|纳西族自治.*$| 羌族自治.*$| 土族自治.*$| 仫佬族自治.*$| 锡伯族自治.*$| 柯尔克孜族自治.*$|景颇族自治.*$|达斡尔族自治.*$|撒拉族自治.*$|布朗族自治.*$|毛南族自治.*$|塔吉克族自治.*$|普米族自治.*$|阿昌族自治.*$|怒族自治.*$|鄂温克族自治.*$|京族自治.*$|基诺族自治.*$|德昂族自治.*$|保安族自治.*$|俄罗斯族自治.*$|裕固族自治.*$|乌孜别克族自治.*$|门巴族自治.*$|鄂伦春族自治.*$|独龙族自治.*$|赫哲族自治.*$|高山族自治.*$|珞巴族自治.*$|塔塔尔族自治.*$|市|区|州|县")
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2) %>%
ungroup() %>%
mutate(prefecture_sname = gsub(name_official, "", prefecture, perl = TRUE))
set.seed(313)
load("dev/corruption_data.rda")
name_official <- c("壮族自治.*$|回族自治.*$|满族自治.*$|维吾尔族自治.*$|苗族自治.*$|彝族自治.*$|土家族自治.*$|藏族自治.*$|蒙古族自治.*$|侗族自治.*$|布依族自治.*$|瑶族自治.*$|白族自治.*$|朝鲜族自治.*$|哈尼族自治.*$|黎族自治.*$|哈萨克族自治.*$|傣族自治.*$|畲族自治.*$|傈僳族自治.*$|东乡族自治.*$|仡佬族自治.*$|拉祜族自治.*$|佤族自治.*$|水族自治.*$|纳西族自治.*$|羌族自治.*$| 土族自治.*$|仫佬族自治.*$| 锡伯族自治.*$| 柯尔克孜族自治.*$|景颇族自治.*$|达斡尔族自治.*$|撒拉族自治.*$|布朗族自治.*$|毛南族自治.*$|塔吉克族自治.*$|普米族自治.*$|阿昌族自治.*$|怒族自治.*$|鄂温克族自治.*$|京族自治.*$|基诺族自治.*$|德昂族自治.*$|保安族自治.*$|俄罗斯族自治.*$|裕固族自治.*$|乌孜别克族自治.*$|门巴族自治.*$|鄂伦春族自治.*$|独龙族自治.*$|赫哲族自治.*$|高山族自治.*$|珞巴族自治.*$|塔塔尔族自治.*$|市|区|州|县")
corruption <- vignette_data %>%
group_by(province) %>%
slice_sample(n = 2) %>%
ungroup() %>%
mutate(prefecture_sname = gsub(name_official, "", prefecture, perl = TRUE))
usethis::use_data(corruption, overwrite = TRUE)
library(regioncode)
View(corruption)
load("data/region_data_all.RData")
load("data/region_data_all.rda")
load("data/region_data.rda")
load("../data/region_data.rda")
file.exists("../data/region_data.rda")
file.exists("data/region_data.rda")
getwd()
load("data/region_table.rda")
code_zhixiashi <- c("110", "120", "310", "400")
load("data/region_table.rda")
code_zhixiashi <- c("110000", "120000", "310000", "400000")
region_table <- region_table %>%
mutate(zhixiashi = prov_code %in% code_zhixiashi)
usethis::use_data(region_table, overwrite = TRUE)
data(corruption)
force(corruption)
corruption <- corruption %>%
mutate(prefecture_id = ifelse(province_id %in% code_zhixiashi, province_id, prefecture_id))
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999,
zhixiashi = TRUE)
library(regioncode)
library(regioncode)
Sys.setlocale(category = "LC_COLLATE", locale = "Chinese")
Sys.setlocale(category = "LC_CTYPE", locale = "Chinese")
Sys.setlocale(category = "LC_COLLATE", locale = "Chinese")
Sys.setlocale(category = "LC_CTYPE", locale = "Chinese")
library(regioncode)
data(corruption)
head(corruption)
# original geocodes. It's 2019 version
corruption$prefecture_id
# after conversion. It's 2005 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999)
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999,
method = "code2name")
corruption$prefecture
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1999,
method = "name2code")
regioncode(data_input = corruption$prefecture,
year_from = 2019,
year_to = 1999,
method = "name2name")
# Full, official names
corruption$prefecture
# Incomplete names
corruption$prefecture_sname
# Converting
regioncode(data_input = corruption$prefecture_sname,
year_from = 2019,
year_to = 1999,
method = "name2code",
incompleteName = "from")
# In the sample data, the division code of municipalities were coded as NA. Filling the codes of municipalities with their provinces' codes.
code_zhixiashi <- c("110000", "120000", "310000", "400000")
corruption <- corruption %>%
mutate(prefecture_id = ifelse(province_id %in% code_zhixiashi, province_id, prefecture_id))
# Converting
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999,
zhixiashi = TRUE)
`%>%`
?`%>%`
library(regioncode)
library(regioncode)
regioncode("110000")
library(regioncode)
regioncode("110000")
regioncode(110000)
?data
library(regioncode)
regioncode(110000)
Sys.which(Sys.getenv("R_QPDF", "qpdf.exe"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.setenv('PATH' = paste0('"D:\userLib\qpdf\R";', Sys.getenv('PATH')))
Sys.setenv('PATH' = paste0('D:\userLib\qpdf\R;', Sys.getenv('PATH')))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
?Sys.getenv
Sys.which(Sys.getenv("R_QPDF", "qpdf.dll"))
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
person(given = "Yue",family = "Hu",role = c("aut","cre"), email = "yuehu@tsinghua.edu.cn")
library(regioncode)
library(regioncode)
devtools::build(vignettes=TRUE)
library(regioncode)
browseVignettes("regioncode")
devtools::install(build_vignettes = TRUE)
12 * 800
install.packages("testthat")
install.packages(c("broom", "broomExtra", "data.table", "distr6", "eRm", "kableExtra", "modelsummary", "rayimage", "rgl", "rmarkdown", "set6", "SparseM", "svglite", "vitae"))
2021 - 1929
2021 - 1929
install.packages(c("broom.helpers", "broomExtra", "cli", "ggraph", "ggsignif", "insight", "ISOcodes", "parameters", "pillar", "pkgload", "RcppParallel", "Rdpack", "regioncode"))
year_from = 199
year_to = 2015,
year_to = 2015
method = "code2code"
province = FALSE
zhixiashi = TRUE,
incompleteName = "none"
data_input <- c("天津市", "广东省")
if (!is.character(data_input) & !is.numeric(data_input))
stop(
'Invalid input: only region names as a character vector or division codes as an integer vector are valid.'
)
if (!is.numeric(year_from))
stop("Invalid input: Converting years must be integers.")
if (!(method %in% c('code2name', 'code2code', 'name2name', 'name2code')))
stop("Invalid input: please choose a valid converting method.")
if (!(incompleteName %in% c("none", "from", "to", "both")))
stop("Invalid input: the options of `incompleteName` are one of 'none', 'from', 'to', and 'both'.")
method = "code2name"
ls_index <- switch(
method,
"code2code" = {
year_from <- paste(year_from, '_code', sep = '')
year_to <- paste(year_to, '_code', sep = '')
c(year_from, year_to)
},
"code2name" = {
year_from <- paste(year_from, '_code', sep = '')
year_to <- paste(year_to, '_name', sep = '')
c(year_from, year_to)
},
"name2code" = {
year_from <- paste(year_from, '_name', sep = '')
year_to <- paste(year_to, '_code', sep = '')
c(year_from, year_to)
},
"name2name" = {
year_from <- paste(year_from, '_name', sep = '')
year_to <- paste(year_to, '_name', sep = '')
c(year_from, year_to)
}
)
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
library(dplyr)
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
df_input <- data_input %>% as.data.frame
ls_index[1]
year_from = 1999
ls_index <- switch(
method,
"code2code" = {
year_from <- paste(year_from, '_code', sep = '')
year_to <- paste(year_to, '_code', sep = '')
c(year_from, year_to)
},
"code2name" = {
year_from <- paste(year_from, '_code', sep = '')
year_to <- paste(year_to, '_name', sep = '')
c(year_from, year_to)
},
"name2code" = {
year_from <- paste(year_from, '_name', sep = '')
year_to <- paste(year_to, '_code', sep = '')
c(year_from, year_to)
},
"name2name" = {
year_from <- paste(year_from, '_name', sep = '')
year_to <- paste(year_to, '_name', sep = '')
c(year_from, year_to)
}
)
ls_index <- case_when(
incompleteName == "both" ~ gsub("_name", "_sname", ls_index),
incompleteName == "from" ~ c(gsub("_name", "_sname", ls_index[1]), ls_index[2]),
incompleteName == "to" ~ c(ls_index[1], gsub("_name", "_sname", ls_index[2])),
incompleteName == "none" ~ ls_index
)
df_input <- data_input %>% as.data.frame
names(df_input) <- ls_index[1]
data_output <- select(region_table,!!ls_index) %>%
distinct() %>%
right_join(df_input) %>%
pull(!!year_to)
if (zhixiashi) {
region_zhixiashi <- region_table %>%
filter(zhixiashi)
region_sname <- region_zhixiashi %>%
select(ends_with("_sname"))
region_name <- region_zhixiashi %>%
select(ends_with("_name"))
region_code <- region_zhixiashi %>%
select(ends_with("_code"))
# replacing the prefectural names and codes with provincial names and codes
region_sname2 <-
replicate(ncol(region_sname), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_sname2) <- names(region_sname)
region_name2 <-
replicate(ncol(region_name), region_zhixiashi$prov_name) %>%
as.data.frame()
names(region_name2) <- names(region_name)
region_code2 <-
replicate(ncol(region_code), region_zhixiashi$prov_code) %>%
as.data.frame()
names(region_code2) <- names(region_code)
region_zhixiashi <-
bind_cols(region_sname2, region_name2, region_code2)
region_zhixiashi <- region_zhixiashi[, order(colnames(region_zhixiashi))]
region_province <- region_table %>%
filter(!zhixiashi)
region_province <- region_province[, order(colnames(region_province))]
region_table <- bind_rows(region_zhixiashi, region_province)
}
library(regioncode)
regiontable
region_table
data(region_table)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
Sys.setlocale(category = "LC_COLLATE", locale = "Chinese")
Sys.setlocale(category = "LC_CTYPE", locale = "Chinese")
library(dplyr)
library(regioncode)
corruption
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
Sys.setlocale(category = "LC_COLLATE", locale = "Chinese")
Sys.setlocale(category = "LC_CTYPE", locale = "Chinese")
library(dplyr)
library(regioncode)
corruption
load(corruption_data.rda)
load(vignetts/corruption_data.rda)
load("vignetts/corruption_data.rda")
getwd()
corruption <- readRDS("vignetts/corruption_data.rda")
corruption <- readRDS("vignettes/corruption_data.rda")
load("vignettes/corruption_data.rda")
corruption <- vignette_data
# original geocodes. It's 2019 version
corruption$prefecture_id
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999)
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999, zhixiashi = FASLE)
# after conversion. It's 1999 version
regioncode(data_input = corruption$prefecture_id,
year_from = 2019,
year_to = 1999, zhixiashi = FALSE)
load("R/syssdata.rda")
load("R/sysdata.rda")
library(tidyverse)
str_sub(region_table$prov_code, start = 2)
str_sub(region_table$prov_code, end = 2)
region_table$prov_name %>% unique()
region_table$prov_name %>% unique() %>% write.csv("provinceName.csv")
source("~/.active-rstudio-document", echo=TRUE)
write.csv(provName, "provinceName.csv")
provName <- read.csv("provinceName.csv")
load("R/sysdata.rda")
region_table$prov_scode <- str_sub(region_table$prov_code, end = 2)
provName <- read.csv("provinceName.csv")
provName <- read.csv("provinceName.csv") %>%
rename(`1998p_nickname` = X1998p_nickname)
provName <- read.csv("provinceName.csv") %>%
rename(`1998p_nickname` = X1998p_nickname,
`1999p_nickname` = X1999p_nickname)
region_table <- left_join(region_table, provName)
relocate(region_table, prov_name, prov_sname, prov_code, `1998p_nickname`, `1999p_nickname`)
provName <- read.csv("provinceName.csv") %>%
rename(`1998_nickname` = X1998p_nickname,
`1999_nickname` = X1999p_nickname)
load("R/sysdata.rda")
region_table$prov_scode <- str_sub(region_table$prov_code, end = 2)
region_table <- relocate(region_table, prov_code, prov_scode, prov_sname, prov_name,  `1998_nickname`, `1999_nickname`)
region_table <- left_join(region_table, provName)
region_table <- relocate(region_table, prov_code, prov_scode, prov_sname, prov_name,  `1998_nickname`, `1999_nickname`)
save(region_table, "R/sysdata.rda")
?save
save(region_table, "sysdata.rda")
save(region_table, file = "R/sysdata.rda")
load(sysdata.rda)
load("R/sysdata.rda")
data_input
year_from = 1999
year_to = 2015
method = "code2code"
province = FALSE
zhixiashi = TRUE
incompleteName = "none"
if (!is.character(data_input) & !is.numeric(data_input))
stop(
'Invalid input: only region names as a character vector or division codes as an integer vector are valid.'
)
if (!is.numeric(year_from))
stop("Invalid input: Converting years must be integers.")
if (!(method %in% c('code2name', 'code2code', 'name2name', 'name2code')))
stop("Invalid input: please choose a valid converting method.")
if (!(incompleteName %in% c("none", "from", "to", "both")))
stop("Invalid input: the options of `incompleteName` are one of 'none', 'from', 'to', and 'both'.")
